{
	"name": "mapping_df_part1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_paymets",
						"type": "DatasetReference"
					},
					"name": "payments"
				},
				{
					"dataset": {
						"referenceName": "ds_orders",
						"type": "DatasetReference"
					},
					"name": "orders"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_mapping_df_dest",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "selectcustomerrelevant"
				},
				{
					"name": "selectpaymentrelevant"
				},
				{
					"name": "selectordersrelevant"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "selectrequiredfields"
				},
				{
					"name": "pivot1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as string,",
				"          Customerslastname as string,",
				"          Customersfirstname as string,",
				"          CustomersCountry as string,",
				"          Customersage as short,",
				"          Customersgender as string,",
				"          Customersemail as string,",
				"          Customersprofession as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> customers",
				"source(output(",
				"          order_id as string,",
				"          payment_id as string,",
				"          type as string,",
				"          descriptions as string,",
				"          pDate as date 'DD/mm/yyyy',",
				"          Status as string,",
				"          Details as string,",
				"          Total_Invoice as short,",
				"          Due_Amount as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> payments",
				"source(output(",
				"          order_id as string,",
				"          customer_id as string,",
				"          Store_id as string,",
				"          Date as date 'DD/mm/yyyy'",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orders",
				"payments filter(Status!=\"error\" && notEquals(Status,\"refunded\")) ~> filter1",
				"customers filter(Customersage >= 20 && Customersage < 71) ~> filter2",
				"filter2 select(mapColumn(",
				"          customer_id,",
				"          Customers_First_Name = Customersfirstname,",
				"          Customers_Last_Name = Customerslastname,",
				"          CustomersCountry,",
				"          Customersage",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcustomerrelevant",
				"filter1 select(mapColumn(",
				"          payment_id,",
				"          order_id,",
				"          Status,",
				"          Due_Amount,",
				"          Total_Invoice",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectpaymentrelevant",
				"orders select(mapColumn(",
				"          order_id,",
				"          customer_id,",
				"          Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectordersrelevant",
				"selectcustomerrelevant, selectordersrelevant join(selectcustomerrelevant@customer_id == selectordersrelevant@customer_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, selectpaymentrelevant join(selectordersrelevant@order_id == selectpaymentrelevant@order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          order_id = selectordersrelevant@order_id,",
				"          Date,",
				"          Customers_First_Name,",
				"          Customers_Last_Name,",
				"          Customers_Country = CustomersCountry,",
				"          Customers_Age = Customersage,",
				"          Status,",
				"          Due_Amount,",
				"          Total_Invoice",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredfields",
				"selectrequiredfields pivot(groupBy(order_id,",
				"          Date,",
				"          Customers_First_Name,",
				"          Customers_Last_Name,",
				"          Customers_Country,",
				"          Customers_Age,",
				"          Total_Invoice),",
				"     pivotBy(Status, ['received', 'not received']),",
				"     Due_Amount_ = sum(Due_Amount),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"pivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['PaymentsOrders.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}